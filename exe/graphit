#!/usr/bin/env ruby

require 'graphit'

require 'bin_utils' # For Speed
require 'optparse'

options = {}
options[:debug]   = false
options[:verbose] = false
OptionParser.new do |opts|
  opts.banner = "Usage: graphit [options] data"

  opts.on("-d", "--[no-]debug", "Debug output") do |d|
    options[:debug] = d
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  
  opts.on("-p", "--png", "Convert BMP to PNG. (Requires ImageMagick)") do |png|
    options[:png] = png
  end
  
  opts.on("--ymin [ymin]", Float) do |ymin|
    options[:ymin] = ymin
  end
  
  opts.on("--ymax [ymax]", Float) do |ymax|
    options[:ymax] = ymax
  end
  
  opts.on("--xmin [xmin]", Float) do |xmin|
    options[:xmin] = xmin
  end
  
  opts.on("--xmax [xmax]", Float) do |xmax|
    options[:xmax] = xmax
  end
  
  opts.on("--height [h]", Integer) do |h|
    options[:height] = h
  end
  
  opts.on("--width [w]", Integer) do |w|
    options[:width] = w
  end
  
  opts.on("--yticsmod [yticsmod]", Integer) do |yticsmod|
    options[:yticsmod] = yticsmod
  end
  
  opts.on("--xticsmod [xticsmod]", Integer) do |xticsmod|
    options[:xticsmod] = xticsmod
  end
  
  opts.on("-o", "--output-file [file]", "Filename") do |of|
    options[:outputfile] = of
  end
  
end.parse!

options[:outputfile] ||= "graph.bmp"

options[:height] ||= 300 
options[:width]  ||= 1050

options[:ymin] ||= "auto"
options[:ymax] ||= "auto"

options[:xmin] ||= "auto"
options[:xmax] ||= "auto"

if options[:debug]
  puts "h: #{@h}, w: #{@w}"
  puts "ymin: #{@ymin}, ymax: #{@ymax}"
end

options[:bottom_padding] ||= 25
options[:top_padding]    ||= 10
options[:left_padding]   ||= 100
options[:right_padding]  ||= 10

options[:yticsmod]       ||= 10
options[:xticsmod]       ||= 3600

options[:data_color]       ||= Graphit::Color.blue_color
options[:background_color] ||= Graphit::Color.light_light_gray_color

data_to_graph = []

xmin = 9999999999
xmax = 0

ARGF.each_line do |line|
  # puts line
  l = line.strip.split(":")
  
  next unless l.size == 2
  
  x = l[0].to_i
  y = l[1].to_f
  
  xmin = x if x < xmin
  xmax = x if x > xmax
  
  data_to_graph.push( Graphit::Point.new( x, y ) )
end

@graph = Graphit::Graph.new( options, data_to_graph )

puts @graph

@bmp   = Graphit::BmpFile.new( @graph.bitmap_drawing )

@bmp.save_to_file( options[:outputfile] )

if options[:png]
  `convert #{options[:outputfile]} #{options[:outputfile].gsub('bmp', 'png')}`
end